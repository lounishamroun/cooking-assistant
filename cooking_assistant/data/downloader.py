"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                      T√âL√âCHARGEMENT DES DONN√âES                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Module pour t√©l√©charger les donn√©es depuis Kaggle.
Bas√© sur scripts/import_raw_data_from_source.py
"""

import logging
import shutil
from pathlib import Path
from datetime import datetime

import kagglehub
from kagglehub import KaggleDatasetAdapter

from ..config import (
    KAGGLE_DATASET_HANDLE,
    RAW_DATA_DIR,
    DOWNLOAD_LOG_FILE
)

# Configuration du logging
logging.basicConfig(
    filename=str(DOWNLOAD_LOG_FILE),
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)
logger = logging.getLogger(__name__)


def ensure_raw_data_once() -> None:
    """
    S'assure que les donn√©es brutes sont disponibles localement.
    
    Comportement :
    - Si data/raw existe et n'est pas vide :
        ‚Üí Ne fait rien (skip le t√©l√©chargement)
    - Sinon :
        ‚Üí T√©l√©charge le dataset depuis Kaggle
        ‚Üí Copie tous les fichiers dans data/raw avec un timestamp
        ‚Üí Log ce qui a √©t√© sauvegard√©
    
    Cette fonction est idempotente : apr√®s le premier succ√®s,
    les appels futurs termineront imm√©diatement.
    """
    
    # V√©rifier si les donn√©es existent d√©j√†
    if RAW_DATA_DIR.exists() and any(RAW_DATA_DIR.iterdir()):
        print(f"‚úì Donn√©es brutes d√©j√† pr√©sentes dans {RAW_DATA_DIR}, skip du t√©l√©chargement.")
        logger.info("Donn√©es brutes d√©j√† pr√©sentes dans %s, skip du t√©l√©chargement.", RAW_DATA_DIR)
        return
    
    print(f"üì• T√©l√©chargement du dataset depuis Kaggle...")
    logger.info("D√©but du t√©l√©chargement du dataset '%s'", KAGGLE_DATASET_HANDLE)
    
    # Pr√©visualiser un fichier (optionnel)
    file_path = "RAW_recipes.csv"
    try:
        df = kagglehub.load_dataset(
            KaggleDatasetAdapter.PANDAS,
            KAGGLE_DATASET_HANDLE,
            file_path,
        )
        print(f"‚úì Pr√©visualisation de {file_path} : {len(df)} lignes")
        logger.info("Charg√© %s via kagglehub.load_dataset()", file_path)
    except Exception as e:
        logger.warning("√âchec de la pr√©visualisation de %s: %s", file_path, e)
    
    # T√©l√©charger le dataset complet
    try:
        res = kagglehub.dataset_download(KAGGLE_DATASET_HANDLE)
        
        # G√©rer les deux formats de retour possibles
        local_path = res[0] if isinstance(res, (tuple, list)) else res
        local_dir = Path(local_path)
        
        if not local_dir.exists():
            raise FileNotFoundError(f"Chemin t√©l√©charg√© introuvable : {local_dir}")
        
        logger.info("Dataset '%s' t√©l√©charg√© dans %s", KAGGLE_DATASET_HANDLE, local_dir)
        
    except Exception as e:
        logger.error("√âchec du t√©l√©chargement du dataset '%s': %s", KAGGLE_DATASET_HANDLE, e)
        raise
    
    # Pr√©parer le dossier de destination
    timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
    RAW_DATA_DIR.mkdir(parents=True, exist_ok=True)
    
    # Identifier les fichiers sources
    if local_dir.is_file():
        src_files = [local_dir]
    else:
        src_files = [p for p in local_dir.iterdir() if p.is_file()]
    
    if not src_files:
        logger.warning("Aucun fichier trouv√© √† copier depuis %s", local_dir)
        print(f"‚ö†Ô∏è  Aucun fichier trouv√© dans {local_dir}")
        return
    
    # Copier chaque fichier avec timestamp
    print(f"\nüìÅ Copie des fichiers dans {RAW_DATA_DIR}...")
    for p in src_files:
        dst = RAW_DATA_DIR / f"{p.stem}_{timestamp}{p.suffix}"
        shutil.copy2(p, dst)
        print(f"   ‚úì Sauvegard√© : {dst.name}")
        logger.info("Sauvegard√© : %s", dst)
    
    print(f"\n‚úÖ T√©l√©chargement termin√© : {len(src_files)} fichier(s) copi√©(s)")
    logger.info("T√©l√©chargement termin√© : %d fichier(s)", len(src_files))


def download_raw_data() -> None:
    """
    Alias pour ensure_raw_data_once().
    Point d'entr√©e pour les scripts.
    """
    ensure_raw_data_once()


if __name__ == "__main__":
    # Permet d'ex√©cuter ce module directement
    ensure_raw_data_once()
