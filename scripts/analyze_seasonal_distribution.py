"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          ANALYSE DE LA DISTRIBUTION SAISONNI√àRE PAR TYPE                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Script pour analyser la distribution des avis par saison et type de recette.
G√©n√®re un CSV avec les statistiques pour la justification des param√®tres.
"""

import sys
from pathlib import Path

# Ajouter le projet au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

import pandas as pd
from cooking_assistant.data import load_classified_recipes, load_interactions
from cooking_assistant.analysis import get_season_from_date
from cooking_assistant.config import RECIPE_TYPES, SEASONS, JUSTIFICATION_DIR


def analyze_seasonal_distribution(merged_df: pd.DataFrame = None) -> dict:
    """
    Analyse la distribution des avis par saison et type de recette.
    
    Args:
        merged_df: DataFrame pr√©-charg√© avec colonnes season et type (optionnel)
    
    Returns:
        dict: R√©sultats de l'analyse avec cl√©s 'total_reviews', 'results', 'filepath'
    """
    print("\n" + "=" * 80)
    print("ANALYSE DE LA DISTRIBUTION SAISONNI√àRE PAR TYPE")
    print("=" * 80)
    
    # Charger les donn√©es si non fournies
    if merged_df is None:
        print("\nüì• Chargement des donn√©es...")
        
        interactions_df = load_interactions()
        recipes_df = load_classified_recipes()
        
        print(f"   ‚úì {len(interactions_df):,} interactions")
        print(f"   ‚úì {len(recipes_df):,} recettes classifi√©es")
        
        # Nettoyer les interactions
        print("\nüîß Nettoyage des donn√©es...")
        interactions_df['date'] = pd.to_datetime(interactions_df['date'], errors='coerce')
        interactions_df = interactions_df.dropna(subset=['date'])
        
        print(f"   ‚úì {len(interactions_df):,} avis avec dates valides")
        
        # Ajouter les saisons
        print("\nüå∏ Ajout des saisons...")
        interactions_df['season'] = interactions_df['date'].apply(get_season_from_date)
        
        # Fusionner avec les recettes
        print("\nüîó Fusion des donn√©es...")
        merged_df = interactions_df.merge(
            recipes_df[['id', 'type']], 
            left_on='recipe_id',
            right_on='id',
            how='inner'
        )
        
        print(f"   ‚úì {len(merged_df):,} avis avec type identifi√©")
    else:
        print("\n‚úì Utilisation des donn√©es pr√©-charg√©es")
        print(f"  {len(merged_df):,} avis")
    
    # Calculer les distributions par type
    results = []
    total_all = len(merged_df)
    
    print("\n" + "=" * 80)
    print("DISTRIBUTION PAR TYPE DE RECETTE")
    print("=" * 80)
    
    for recipe_type in RECIPE_TYPES:
        type_data = merged_df[merged_df['type'] == recipe_type]
        total_type = len(type_data)
        percentage_of_total = (total_type / total_all * 100) if total_all > 0 else 0
        
        print(f"\nüìä {recipe_type.upper()} : {total_type:,} avis ({percentage_of_total:.1f}% du total)")
        print("-" * 80)
        
        for season in SEASONS:
            season_count = len(type_data[type_data['season'] == season])
            percentage_of_type = (season_count / total_type * 100) if total_type > 0 else 0
            
            results.append({
                'Type_Recette': recipe_type,
                'Saison': season,
                'Nombre_Reviews': season_count,
                'Pourcentage_du_Type': round(percentage_of_type, 2),
                'Pourcentage_du_Total': round((season_count / total_all * 100), 2)
            })
            
            print(f"   {season:10s} : {season_count:8,} avis ({percentage_of_type:5.1f}%)")
    
    # Cr√©er le DataFrame des r√©sultats
    results_df = pd.DataFrame(results)
    
    # Sauvegarder
    print("\n" + "=" * 80)
    print("üíæ SAUVEGARDE DES R√âSULTATS")
    print("=" * 80)
    
    filename = "distribution_saisonniere_par_type.csv"
    filepath = JUSTIFICATION_DIR / filename
    
    # Cr√©er le dossier si n√©cessaire
    JUSTIFICATION_DIR.mkdir(parents=True, exist_ok=True)
    
    results_df.to_csv(filepath, index=False, encoding='utf-8')
    
    print(f"\n‚úì Fichier sauvegard√© : {filename}")
    print(f"  üìÅ Emplacement : {JUSTIFICATION_DIR}")
    print(f"  üìä {len(results_df)} lignes")
    
    # Afficher un r√©sum√© global
    print("\n" + "=" * 80)
    print("R√âSUM√â GLOBAL")
    print("=" * 80)
    print(f"\nTotal des avis analys√©s : {total_all:,}")
    
    for recipe_type in RECIPE_TYPES:
        type_total = results_df[results_df['Type_Recette'] == recipe_type]['Nombre_Reviews'].sum()
        percentage = (type_total / total_all * 100) if total_all > 0 else 0
        print(f"  ‚Ä¢ {recipe_type:10s} : {type_total:8,} ({percentage:5.1f}%)")
    
    print("\n" + "=" * 80)
    print("‚úÖ ANALYSE TERMIN√âE")
    print("=" * 80 + "\n")
    
    return {
        'total_reviews': total_all,
        'results': results,
        'filepath': str(filepath),
        'dataframe': results_df
    }


def main():
    """Point d'entr√©e du script."""
    try:
        analysis_results = analyze_seasonal_distribution()
        return 0
    except Exception as e:
        print(f"\n‚ùå Erreur : {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
